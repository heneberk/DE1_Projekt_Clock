library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity stopwatch is
    Port (
        clk         : in  STD_LOGIC;                         -- hlavní hodiny (např. 100 MHz)
        rst         : in  STD_LOGIC;                         -- globální reset
        sw2         : in  STD_LOGIC;                         -- switch 2: aktivace režimu
        btn_center  : in  STD_LOGIC;                         -- tlačítko pro ovládání režimu
        seg_display : out STD_LOGIC_VECTOR(23 downto 0)      -- výstup: HHMMSS jako číslo
    );
end stopwatch;

architecture Behavioral of stopwatch is

    signal one_hz_clk  : STD_LOGIC := '0';
    signal clk_divider : INTEGER := 0;

    signal seconds     : INTEGER range 0 to 59 := 0;
    signal minutes     : INTEGER range 0 to 59 := 0;
    signal hours       : INTEGER range 0 to 99 := 0;

    signal btn_state   : INTEGER range 0 to 2 := 0;     -- 0 = čekání, 1 = běží, 2 = zastaveno
    signal running     : STD_LOGIC := '0';
    signal blinking    : STD_LOGIC := '0';
    signal btn_reg     : STD_LOGIC := '0';              -- pomocný registr pro detekci hrany

begin

    -- 1Hz dělič + blikání
    clk_div: process(clk)
    begin
        if rising_edge(clk) then
            if clk_divider >= 50000000 then  -- při 100 MHz hodinách
                clk_divider <= 0;
                one_hz_clk <= not one_hz_clk;
                blinking <= not blinking;
            else
                clk_divider <= clk_divider + 1;
            end if;
        end if;
    end process;

    -- Řízení tlačítkem: start → stop → reset
    process(clk)
    begin
        if rising_edge(clk) then
            if sw2 = '1' then
                if btn_center = '1' and btn_reg = '0' then  -- náběžná hrana
                    case btn_state is
                        when 0 =>
                            running <= '1';
                            btn_state <= 1;
                        when 1 =>
                            running <= '0';
                            btn_state <= 2;
                        when 2 =>
                            seconds <= 0;
                            minutes <= 0;
                            hours   <= 0;
                            btn_state <= 0;
                        when others =>
                            btn_state <= 0;
                    end case;
                end if;
                btn_reg <= btn_center;
            else
                -- Reset všech stavů pokud SW2 není aktivní
                running <= '0';
                seconds <= 0;
                minutes <= 0;
                hours   <= 0;
                btn_state <= 0;
                btn_reg <= '0';
            end if;
        end if;
    end process;

    -- Běh stopek
    process(one_hz_clk)
    begin
        if rising_edge(one_hz_clk) then
            if running = '1' then
                if seconds = 59 then
                    seconds <= 0;
                    if minutes = 59 then
                        minutes <= 0;
                        if hours = 99 then
                            hours <= 0;
                        else
                            hours <= hours + 1;
                        end if;
                    else
                        minutes <= minutes + 1;
                    end if;
                else
                    seconds <= seconds + 1;
                end if;
            end if;
        end if;
    end process;

    -- Výstupní logika na segmentovky
    process(blinking, btn_state)
        variable total_time : INTEGER;
    begin
        if sw2 = '1' then
            if btn_state = 0 then
                if blinking = '1' then
                    seg_display <= (others => '1'); -- segmenty zhasnuté = blikání
                else
                    seg_display <= (others => '0'); -- zobrazení nul
                end if;
            else
                total_time := hours * 10000 + minutes * 100 + seconds;
                seg_display <= std_logic_vector(to_unsigned(total_time, seg_display'length));
            end if;
        else
            seg_display <= (others => '1'); -- mimo režim, zhasnout vše
        end if;
    end process;

end Behavioral;
