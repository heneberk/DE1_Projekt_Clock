library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity stopky_hms is
    Port ( 
        CLK   : in  STD_LOGIC;
        RESET : in  STD_LOGIC;
        SW2   : in  STD_LOGIC;
        BTNC  : in  STD_LOGIC;
        SEG   : out STD_LOGIC_VECTOR(6 downto 0);
        AN    : out STD_LOGIC_VECTOR(7 downto 0)
    );
end stopky_hms;

architecture Behavioral of stopky_hms is
    -- Časové proměnné
    signal hours   : INTEGER range 0 to 99 := 0;
    signal minutes : INTEGER range 0 to 59 := 0;
    signal seconds : INTEGER range 0 to 59 := 0;

    signal stopwatch_mode : STD_LOGIC := '0';
    signal running : STD_LOGIC := '0';
    signal btnc_last : STD_LOGIC := '0';

    -- Dělič pro 1Hz
    signal clk_div : INTEGER := 0;
    signal clk_1hz : STD_LOGIC := '0';
    constant CLK_DIV_1HZ : INTEGER := 100_000_000;

    -- Multiplexing
    signal clk_disp : INTEGER := 0;
    signal disp_sel : INTEGER range 0 to 7 := 0;
    constant CLK_DIV_DISP : INTEGER := 10_000;

    signal digits : STD_LOGIC_VECTOR(31 downto 0);  -- 8 číslic x 4 bity
    signal digit  : INTEGER range 0 to 9 := 0;

begin

    -- Generování 1Hz pulzu
    process(CLK)
    begin
        if rising_edge(CLK) then
            if clk_div = CLK_DIV_1HZ - 1 then
                clk_div <= 0;
                clk_1hz <= '1';
            else
                clk_div <= clk_div + 1;
                clk_1hz <= '0';
            end if;
        end if;
    end process;

    -- Stopky
    process(CLK)
    begin
        if rising_edge(CLK) then
            if RESET = '1' then
                running <= '0';
                btnc_last <= '0';
                hours <= 0;
                minutes <= 0;
                seconds <= 0;
            else
                stopwatch_mode <= SW2;

                if stopwatch_mode = '1' then
                    if BTNC = '1' and btnc_last = '0' then
                        running <= not running;
                    end if;
                    btnc_last <= BTNC;

                    if clk_1hz = '1' and running = '1' then
                        seconds <= seconds + 1;
                        if seconds = 60 then
                            seconds <= 0;
                            minutes <= minutes + 1;
                            if minutes = 60 then
                                minutes <= 0;
                                hours <= hours + 1;
                                if hours = 100 then
                                    hours <= 0;
                                end if;
                            end if;
                        end if;
                    end if;
                else
                    running <= '0';
                    hours <= 0;
                    minutes <= 0;
                    seconds <= 0;
                end if;
            end if;
        end if;
    end process;

    -- Převod na číslice 
    process(hours, minutes, seconds)
    begin
        digits(31 downto 28) <= std_logic_vector(to_unsigned(hours / 10, 4));
        digits(27 downto 24) <= std_logic_vector(to_unsigned(hours / 10, 4));
        digits(23 downto 20) <= std_logic_vector(to_unsigned(hours / 10, 4));
        digits(19 downto 16) <= std_logic_vector(to_unsigned(hours / 10, 4));
        digits(15 downto 12) <= std_logic_vector(to_unsigned(hours / 10, 4));
        digits(11 downto 8)  <= std_logic_vector(to_unsigned(hours / 10, 4));
        digits(7 downto 0)   <= (others => '0');  -- Poslední dvě číslice volné (např. desetiny)
    end process;

    -- Multiplexing
    process(CLK)
    begin
        if rising_edge(CLK) then
            if clk_disp = CLK_DIV_DISP - 1 then
                clk_disp <= 0;
                disp_sel <= (disp_sel + 1) mod 8;
            else
                clk_disp <= clk_disp + 1;
            end if;
        end if;
    end process;

    -- Výběr aktuání číslice
    process(disp_sel, digits)
    begin
        case disp_sel is
            when 0 => digit <= to_integer(unsigned(digits(3 downto 0)));    AN <= "11111110";
            when 1 => digit <= to_integer(unsigned(digits(7 downto 4)));    AN <= "11111101";
            when 2 => digit <= to_integer(unsigned(digits(11 downto 8)));   AN <= "11111011";
            when 3 => digit <= to_integer(unsigned(digits(15 downto 12)));  AN <= "11110111";
            when 4 => digit <= to_integer(unsigned(digits(19 downto 16)));  AN <= "11101111";
            when 5 => digit <= to_integer(unsigned(digits(23 downto 20)));  AN <= "11011111";
            when 6 => digit <= to_integer(unsigned(digits(27 downto 24)));  AN <= "10111111";
            when 7 => digit <= to_integer(unsigned(digits(31 downto 28)));  AN <= "01111111";
            when others => digit <= 0; AN <= "11111111";
        end case;
    end process;

    -- Dekodér 7-segment
    process(digit)
    begin
        case digit is
            when 0 => SEG <= "1000000";
            when 1 => SEG <= "1111001";
            when 2 => SEG <= "0100100";
            when 3 => SEG <= "0110000";
            when 4 => SEG <= "0011001";
            when 5 => SEG <= "0010010";
            when 6 => SEG <= "0000010";
            when 7 => SEG <= "1111000";
            when 8 => SEG <= "0000000";
            when 9 => SEG <= "0010000";
            when others => SEG <= "1111111";
        end case;
    end process;

end Behavioral;
